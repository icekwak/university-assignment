(DNode 클래스)
public class DNode <E> {
	private E item;
	private DNode previous;
	private DNode next;
	
	public DNode(E newItem, DNode p, DNode q) {
		item = newItem;
		previous = p;
		next = q;
	}
	
	public E getItem() {
		return item;
	}
	public void setItem(E newItem) {
		item = newItem;
	}
	
	public DNode getPrevious() {
		return previous;
	}
	public void setPrevious(DNode p) {
		previous = p;
	}
	
	public DNode getNext() {
		return next;
	}
	public void setNext(DNode q) {
		next = q;
	}
}

------------------------------------------------------------------------------
(DList 클래스)
import java.util.NoSuchElementException;
public class DList <E> {
	protected DNode head, tail;
	protected int size;
	
	public DList() {
		head = new DNode(null, null, null);
		tail = new DNode(null, head, null);
		head.setNext(tail);
		size = 0;
	}
	
	public void insertBefore(DNode p, E newItem) { // p가 가리키는 노드 앞에 삽입
		DNode t = p.getPrevious();
		DNode newNode = new DNode(newItem, t, p);
		p.setPrevious(newNode);
		t.setNext(newNode);
		size++;
	}
	
	public void insertAfter(DNode p, E newItem) { // p가 가리키는 노드 뒤에 삽입
		DNode t = p.getNext();
		DNode newNode = new DNode(newItem, p, t);
		t.setPrevious(newNode);
		p.setNext(newNode);
		size++;
	}
	
	public void delete(DNode x) { // x가 가리키는 노드 삭제
		if(x == null)
			throw new NoSuchElementException();
		if(size <= 0)
			throw new NoSuchElementException();
		DNode f = x.getPrevious();
		DNode r = x.getNext();
		f.setNext(r);
		r.setPrevious(f);
		size--;
	}
	
	public void print() {
		DNode p = head.getNext();
		
		if(p == tail)
			System.out.print("리스트 비어있음");
		
		for(int i = 0; i < size; i++) {
			System.out.print(p.getItem() + "\t");
			p = p.getNext();
		}
		System.out.println();
	}
}

----------------------------------------------------------------------------------------
(DListMain 클래스)
public class DListMain {
	public static void main(String[] args) {
		DList<String> s = new DList<String>();
		
		s.insertAfter(s.head, "apple");
		s.insertBefore(s.tail, "orange");
		s.insertBefore(s.tail, "cherry");
		s.insertAfter(s.head.getNext(), "pear");
		s.print();	System.out.println();
		
		s.delete(s.tail.getPrevious());
		s.print(); System.out.println();
		
		s.insertBefore(s.tail, "grape");
		s.print(); System.out.println();
		s.delete(s.head.getNext()); s.print();
		s.delete(s.head.getNext()); s.print();
		s.delete(s.head.getNext()); s.print();
		s.delete(s.head.getNext()); s.print();
	}
}
(TopologicalSort class)
import java.util.*;
public class TopologicalSort {
	int N;					 // 그래프의 정점 수
	boolean[] visited;		 // DFS 수행 중 방문여부 체크 용
	List<Integer>[] adjList; // 인접리스트 형태의 입력 그래프
	List<Integer> sequence;	 // 위상 정렬 순서를 담을 리스트
	
	public TopologicalSort(List<Integer>[] graph) { // 생성자
		N = graph.length;
		visited = new boolean[N];
		adjList = graph;
		sequence = new ArrayList<>();
	}
	
	public List<Integer> tsort(){	   // 위상정렬을 위한 DFS 수행
		for(int i =0; i < N; i++) {	
			if(!visited[i])
				dfs(i);
		}
		Collections.reverse(sequence); // sequence를 역순으로 만들기
		return sequence;
	}
	
	public void dfs(int i) {	  // DFS 수행
		visited[i] = true;
		for(int v : adjList[i]) { // i의 방문이 끝나고 앞으로 방문해야하는 각 정점 v에 대해
			if(!visited[v])
				dfs(v);
		}
		sequence.add(i);		  // i에서 진출하는 간선이 더 이상 없으므로 i를 sequence에 추가
	}
}
-----------------------------------------------------------------------------------------------------------------------------
(Q4Test class)
import java.util.*;
public class Q4Test {
	public static void main(String[] args) {
		int N = 9;
		List<Integer>[] adjList = new List[N];
		
		for(int i = 0; i < N; i++)
			adjList[i] = new LinkedList<>();
		
		adjList[0].add(1);	adjList[1].add(3);	adjList[1].add(4);
		adjList[2].add(0);	adjList[2].add(1);	adjList[3].add(6);
		adjList[4].add(5);	adjList[5].add(3);	adjList[5].add(7);
		adjList[6].add(7);	adjList[7].add(8);
		
		System.out.println("위상 정렬:");
		TopologicalSort ts = new TopologicalSort(adjList);
		System.out.println(ts.tsort());
	}
}
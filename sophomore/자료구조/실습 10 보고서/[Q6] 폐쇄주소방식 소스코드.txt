(Chaining class)
public class Chaining <K, V> {
	private int M = 13; // 테이블 크기
	private Node[] a = new Node[M]; // 해시테이블
	
	public static class Node{ // Node 클래스
		private Object key;
		private Object data;
		private Node next;
		
		public Node(Object newkey, Object newdata, Node ref) { // 생성자
			key = newkey;
			data = newdata;
			next = ref;
		}
		
		public Object getKey() {
			return key;
		}
		
		public Object getData() {
			return data;
		}
	}
	
	private int hash(K key) { // 해시코드
		return (key.hashCode() & 0x7fffffff) % M; // 나눗셈 연산
	}
	
	public V get(K key) { // 탐색 연산
		int i = hash(key);
		for(Node x = a[i]; x != null; x = x.next) { // 연결리스트 탐색
			if(key.equals(x.key))
				return (V) x.data; // 탐색 성공
		}
		return null; // 탐색 실패
	}
	
	public void put(K key, V data) { // 삽입 연산
		int i = hash(key);
		for(Node x = a[i]; x != null; x = x.next) {
			if(key.equals(x.key)) { // 이미 key 존재
				x.data = data; // 데이터만 갱신
				return;
			}
		}
		a[i] = new Node(key,data,a[i]); // 연결리스트의 첫 노드 삽입
	}
	
	public void print() { // 출력함수
		for(int i=0; i < M; i++) {
			System.out.print(i);
			for(Node x = a[i]; x != null; x = x.next) // 연결리스트 탐색
				System.out.format("-->[%d, %s]",x.getKey(),x.getData()); // 연결리스트 출력
			System.out.println();
		}
	}
}

--------------------------------------------------------------------------------------------------------------------------------------------
(Chainingtest class)
public class Chainingtest {
	public static void main(String[] args) {
		Chaining<Integer,String> c = new Chaining<Integer,String>();
		
		c.put(25, "grape");		c.put(37, "apple");
		c.put(18, "banana");	c.put(55, "cherry");
		c.put(22, "mango");		c.put(35, "lime");
		c.put(50, "orange");	c.put(63, "watermelon");
		
		System.out.println("탐색 결과");
		System.out.println("50의 data = " + c.get(50));
		System.out.println("63의 data = " + c.get(63));
		System.out.println("37의 data = " + c.get(37));
		System.out.println("22의 data = " + c.get(22));
		System.out.println();
		
		System.out.println("해시 테이블:");
		c.print();
	}
}
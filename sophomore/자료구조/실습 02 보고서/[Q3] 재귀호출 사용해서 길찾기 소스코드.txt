public class FindPath {
	static final int NOMOVE = 0;
	static final int LEFT   = 1000;
	static final int RIGHT  = 100;
	static final int UP     = 10;
	static final int DOWN   = 1;
	
	public static void main(String[] args) {
		int[][] map1 = {{  0, 100, 0},
						{100,  10, 0},
						{ 10,   0, 0}};
		
		int[][] map2 = {{  0, 1000, 0},
						{100,   10, 0},
						{ 10,    0, 0}};
		
		int nROW = 3;
		int nCOL = 3;
		
		int startY = 2, startX = 0;
		int finishY = 0, finishX = 2;
		
		if(findPath(map1, startY, startX, finishY, finishX, nROW, nCOL) == 1) {
			System.out.println("map1: Found a path!");
		}else {
			System.out.println("map1: There is no path!");
		}
		
		if(findPath(map2, startY, startX, finishY, finishX, nROW, nCOL) == 1) {
			System.out.println("map2: Found a path!");
		}else {
			System.out.println("map2: There is no path!");
		}
	}
	
	public static int findPath(int[][] map, int currY, int currX,
								int endY, int endX, int nRow, int nCol) {
		int result = 0;
		
		if(currY == endY && currX == endX) {
			return result = 1;
		}
		
		
		if(currX < 0 || currX >= nCol) {
			return result = 0;
		}else if(currY < 0 || currY >= nRow) {
			return result = 0;
		}
		
		int direstion = map[currY][currX];
		if(direstion == LEFT) {
			return findPath(map, currY, currX-1, endY, endX, nRow, nCol);
		}else if(direstion == RIGHT) {
			return findPath(map, currY, currX+1, endY, endX, nRow, nCol);
		}else if(direstion == UP) {
			return findPath(map, currY-1, currX, endY, endX, nRow, nCol);
		}else if(direstion == DOWN) {
			return findPath(map, currY+1, currX, endY, endX, nRow, nCol);
		}else if(direstion == NOMOVE) {
			return result = 0;
		}
		return result;
	}
}
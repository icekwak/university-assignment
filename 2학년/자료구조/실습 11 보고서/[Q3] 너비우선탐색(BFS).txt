(Edge class)
public class Edge {
	int adjvertex; // 간선의 다른 쪽 정점
	
	public Edge(int v) { // 생성자
		adjvertex = v;
	}
}

------------------------------------------------------------
(BFS class)
import java.util.*;
public class BFS {
	int N; // 그래프 정점 수
	List<Edge>[] graph;
	private boolean[] visited; // DFS 수행 중 방문한 정점을 true로 만든다.
	
	public BFS(List<Edge>[] adjList) { // 생성자
		N = adjList.length;
		graph = adjList;
		visited = new boolean[N];
		
		for(int i = 0; i < N; i++)
			visited[i] = false; // 배열 초기화
		
		for(int i = 0; i < N; i++) {
			if(!visited[i])
				bfs(i);
		}
	}
	
	private void bfs(int i) {
		Queue<Integer> q = new LinkedList<Integer>(); // 큐 선언
		visited[i] = true;
		
		q.add(i); // 큐에 시작 정점 s를 삽입
		while(!q.isEmpty()) {
			int j = q.remove();				// 큐에서 정점 j를 가져옴
			System.out.print(j+" ");
			for(Edge e : graph[j]) {
				if(!visited[e.adjvertex]) {	// 정점 j에 인접한 정점들 중 방문이 안된 정점 하나 씩 방문
					visited[e.adjvertex] = true;
					q.add(e.adjvertex);		// 새로 방문된 정점을 큐에 삽입
				}
			}
		}
	}
}

----------------------------------------------------------------------------------------------------------------
(Q3Test class)
import java.util.*;
public class Q3Test {
	public static void main(String[] args) {
		int N = 10; // 정점 수
		List<Edge>[] adjList = new List[N];
		
		for(int i = 0; i < N; i++)
			adjList[i] = new LinkedList<>();
		
		adjList[0].add(new Edge(2));	adjList[0].add(new Edge(1));
		adjList[1].add(new Edge(3));	adjList[1].add(new Edge(0));
		adjList[2].add(new Edge(3));	adjList[2].add(new Edge(0));
		adjList[3].add(new Edge(9));	adjList[3].add(new Edge(8));
		adjList[3].add(new Edge(2));	adjList[3].add(new Edge(1));
		adjList[4].add(new Edge(5));	adjList[5].add(new Edge(7));
		adjList[5].add(new Edge(6));	adjList[5].add(new Edge(4));
		adjList[6].add(new Edge(7));	adjList[6].add(new Edge(5));
		adjList[7].add(new Edge(6));	adjList[7].add(new Edge(5));
		adjList[8].add(new Edge(3));	adjList[9].add(new Edge(3));
		
		System.out.println("BFS(0) 방문 순서:");
		BFS bfs = new BFS(adjList);
	}
}
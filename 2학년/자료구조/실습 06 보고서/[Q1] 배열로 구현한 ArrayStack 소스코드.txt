(ArrayStack class)
import java.util.EmptyStackException;
public class ArrayStack <E> {
	private E s[]; 		//스택을 위한 배열
	private int top; 	//스택의 top 항목의 배열 원소 인덱스
	
	public ArrayStack() { //크기가 1인 배열 초기화 생성자
		s = (E[]) new Object[1];
		top = -1;
	}
	
	public int size() { //항목 수 리턴
		return top+1;
	}
	
	public boolean isEmpty() { //empty이면 true리턴
		return (top == -1);
	}
	
	public E peek() { //top 항목 리턴
		if(isEmpty())
			throw new EmptyStackException();
		return s[top];
	}
	
	public void push(E newItem) { 	//push 연산
		if(size() == s.length)
			resize(2*s.length);		//크기 2배로 확장
		s[++top] = newItem;			//새 항목 push
	}
	
	public E pop() { //pop 연산
		if(isEmpty())
			throw new EmptyStackException();
		E item = s[top];
		s[top--] = null;
		if(size() > 0 && size() == s.length/4)
			resize(s.length/2); //크기 1/2로 축소
		return item;
	}
	
	private void resize(int newSize) { //배열크기 조절
		Object[] t = new Object[newSize];	
		for(int i=0; i<size(); i++)
			t[i] = s[i];				
		s =  (E[]) t;					
	}
	
	public void print() { //출력
		for(int i=0; i<s.length; i++) {
			if(i < size())
				System.out.printf(s[i] + "\t");
			else System.out.printf("null\t");
		}
		System.out.println();
	}
}

-----------------------------------------------------------------------------------------------------------
(ArrayStackMain class)
public class ArrayStackMain {
	public static void main(String[] args) {
		ArrayStack<String> stack = new ArrayStack<String>();
		
		stack.push("apple");
		stack.push("orange");
		stack.push("cherry");
		System.out.println(stack.peek());
		stack.push("pear");
		stack.print();
		stack.pop();
		System.out.println(stack.peek());
		stack.push("grape");
		stack.print();
	}
}
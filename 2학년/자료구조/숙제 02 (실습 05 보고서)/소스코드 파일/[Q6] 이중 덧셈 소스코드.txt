(DNode 클래스)
public class DNode <E> {
	private int item;
	private DNode previous;
	private DNode next;
	
	public DNode(int newItem, DNode p, DNode q) {
		item = newItem;
		previous = p;
		next = q;
	}
	
	public int getItem() {
		return item;
	}
	public void setItem(int newItem) {
		item = newItem;
	}
	
	public DNode getPrevious() {
		return previous;
	}
	public void setPrevious(DNode p) {
		previous = p;
	}
	
	public DNode getNext() {
		return next;
	}
	public void setNext(DNode q) {
		next = q;
	}
}

---------------------------------------------------------------------------
(DList 클래스)
import java.util.NoSuchElementException;
public class DList <E> {
	protected DNode head, tail;
	protected int size;
	
	public DList() {
		head = new DNode(0, null, null);
		tail = new DNode(0, head, null);
		head.setNext(tail);
		size = 0;
	}
	
	public void insertBefore(DNode p, int newItem) { // p가 가리키는 노드 앞에 삽입
		DNode t = p.getPrevious();
		DNode newNode = new DNode(newItem, t, p);
		p.setPrevious(newNode);
		t.setNext(newNode);
		size++;
	}
	
	public void insertAfter(DNode p, int newItem) { // p가 가리키는 노드 뒤에 삽입
		DNode t = p.getNext();
		DNode newNode = new DNode(newItem, p, t);
		t.setPrevious(newNode);
		p.setNext(newNode);
		size++;
	}
	
	public void delete(DNode x) { // x가 가리키는 노드 삭제
		if(x == null)
			throw new NoSuchElementException();
		if(size <= 0)
			throw new NoSuchElementException();
		DNode f = x.getPrevious();
		DNode r = x.getNext();
		f.setNext(r);
		r.setPrevious(f);
		size--;
	}
	
	public void print() {
		DNode p = head.getNext();
		
		if(p == tail)
			System.out.print("리스트 비어있음");
		
		for(int i = 0; i < size; i++) {
			System.out.print(p.getItem() + "\t");
			p = p.getNext();
		}
		System.out.println();
	}
	
	public int add(DList dl2) {
		DNode a = tail;
		DNode b = dl2.tail;
		int sum = 0, x = 0, y =10;
		if(size < dl2.size) {
			for(int i = 0; i <= dl2.size; i++) {
				if(sum == 0) {
					sum += a.getItem() + b.getItem();
					a = a.getPrevious(); b = b.getPrevious();
				}
				else {
					x = (a.getItem() + b.getItem()) * y;
					sum += x;
					a = a.getPrevious(); b = b.getPrevious();
					y *= 10;
				}
			}
		}
		else {
			for(int i = 0; i <= dl2.size+1; i++) {
				if(sum == 0) {
					sum += a.getItem() + b.getItem();
					a = a.getPrevious(); b = b.getPrevious();
				}
				else {
					x = (a.getItem() + b.getItem()) * y;
					sum += x;
					a = a.getPrevious(); b = b.getPrevious();
					y *= 10;
				}
			}
		}
		return sum;
	}
}

------------------------------------------------------------------------------
(main6 클래스)
public class main6 {
	public static void main(String[] args) {
		DList<Integer> dl1 = new DList<Integer>();
		DList<Integer> dl2 = new DList<Integer>();
		
		dl1.insertBefore(dl1.tail,1);
		dl1.insertBefore(dl1.tail,2);
		dl1.insertBefore(dl1.tail,3);
		dl1.print();
		System.out.println();
		
		dl2.insertBefore(dl2.tail,6);
		dl2.insertBefore(dl2.tail,7);
		dl2.insertBefore(dl2.tail,8);
		dl2.insertBefore(dl2.tail,9);
		dl2.print();
		System.out.println();
		
		int add1 = dl1.add(dl2);
		System.out.println("add1 = " + add1 + "\n");
		
		int add2 = dl2.add(dl1);
		System.out.println("add2 = " + add2 + "\n");
	}
}
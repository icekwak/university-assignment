(Node class)
public class Node <E> {
	private E item;
	private Node<E> next;
	
	public Node(E newItem, Node<E> node) {
		item = newItem;
		next = node;
	}
	
	public E getItem() {
		return item;
	}
	public void setItem(E newItem) {
		item = newItem;
	}
	
	public Node<E> getNext() {
		return next;
	}
	public void setNext(Node<E> newNext) {
		next = newNext;
	}
}

--------------------------------------------------------------------------
(ListQueue class)
import java.util.NoSuchElementException;
public class ListQueue <E> {
	private Node<E> front, rear;
	private int size;
	
	public ListQueue() {
		front = rear = null;
		size = 0;
	}
	
	public int size() {
		return size;
	}
	
	public boolean isEmpty() {
		return (size == 0);
	}
	
	public void add(E newItem) {
		Node newNode = new Node(newItem, null);
		if(isEmpty())
			front = newNode;
		else
			rear.setNext(newNode);
		rear = newNode;
		size++;
	}
	
	public E remove() {
		if(isEmpty())
			throw new NoSuchElementException();
		E frontItem = front.getItem();
		front = front.getNext();
		size--;
		if(isEmpty())
			rear = null;
		return frontItem;
	}
	
	public void print() {
		Node p = front;
		for(int i = 0; i < size; i++) {
			System.out.printf("%-10s", p.getItem());
			p = p.getNext();
		}
		System.out.println();
	}
	
	public void reverse() {
		E[] item = (E[]) new Object[size]; // remove() 리턴값 담는 그릇
		
		for(int i = item.length; i > 0; i--)
			item[i-1] = remove();
		
		for(int j = 0; j < item.length; j++)
			add(item[j]);
	}
}

-----------------------------------------------------------------------------------------------------
(ReverseMain class)
public class ReverseMain {
	public static void main(String[] args) {
		//Task1
		ListQueue<Character> chq = new ListQueue<Character>();
		
		System.out.println("\t\t== 뒤집기 전 ==");
		chq.add('A');	chq.add('B');	chq.add('C');
		chq.add('D');	chq.add('E');	chq.print();
		System.out.println();
		
		System.out.println("\t\t== 뒤집은 후 ==");
		chq.reverse();
		chq.print();
		
		System.out.println("=========================================");
		
		//Task2
		ListQueue<Integer> inq = new ListQueue<Integer>();
		
		System.out.println("\t\t== 뒤집기 전 ==");
		inq.add(1);		inq.add(2);		inq.add(3);
		inq.add(4);		inq.add(5);		inq.print();
		System.out.println();
		
		System.out.println("\t\t== 뒤집은 후 ==");
		inq.reverse();
		inq.print();
	}
}